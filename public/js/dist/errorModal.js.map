{"version":3,"file":"errorModal.js","sources":["../modules/addHTMLTemplate.js","../modules/handleModal.js","../modules/errorModal.js"],"sourcesContent":["/**\r\n *  A universal functions that adds a template to the DOM\r\n * @param {string} rootId Host ID, where to position the templates\r\n * @param {string} templateId the template Id in the html waiting for position\r\n * @param {'beforebegin' | 'beforeend' | 'afterbegin' | 'afterend'} displayPosition HTML insert position in the root element\r\n * @returns {HTMLElement} HTML DOM elment inserted in the DOM\r\n */\r\nconst addTemplateUIElement = (rootId, templateId, displayPosition) => {\r\n  // get the\r\n  const overlayRoot = document.getElementById(rootId);\r\n  const templateEl = document.getElementById(templateId);\r\n  let domEl = '';\r\n\r\n  /// Clone\r\n  domEl = document.importNode(templateEl.content, true).firstElementChild;\r\n\r\n  /// Handle display\r\n  overlayRoot.insertAdjacentElement(displayPosition, domEl);\r\n\r\n  return domEl;\r\n};\r\n\r\n///\r\nexport default addTemplateUIElement;\r\n","import addTemplateUIElement from './addHTMLTemplate.js';\r\n\r\n/**\r\n * Handles close of the modal/popup with a backdrop and close button on click\r\n * @param {HTMLElement} triggerElement The selector element\r\n */\r\nconst handleClosePopup = triggerElement => {\r\n  /**\r\n   * Use button to close the modal. Animates the modal them removes it from the flow\r\n   * @param {HTMLDivElement} modalEl The modal div element\r\n   */\r\n  const closeModalByButton = function (modalEl) {\r\n    modalEl.classList.add(`popup--hide`);\r\n\r\n    /// Remove element from the flow\r\n    setTimeout(() => {\r\n      modalEl.classList.add('popup--remove');\r\n    }, 400);\r\n  };\r\n\r\n  /**\r\n   * Use Backdrop to close the modal\r\n   * @param {HTMLDivElement} backdropEl The backdrop element\r\n   */\r\n  const closeModalByBackdrop = function (backdropEl) {\r\n    // Add delay\r\n    setTimeout(() => {\r\n      backdropEl.classList.add('popup--remove');\r\n    }, 250);\r\n  };\r\n\r\n  /// Listen to the click event to close both the modal via clicking the button or clicking the backdrop\r\n  triggerElement.addEventListener('click', function (event) {\r\n    /// Handle close of the popup/modal if the close button is clicked\r\n    if (this.classList.contains('modal__btn-close')) {\r\n      // Close modal via button\r\n      closeModalByButton(this.parentElement);\r\n\r\n      // Close the the backdrop\r\n      closeModalByBackdrop(this.parentElement.nextElementSibling);\r\n    }\r\n\r\n    /// Handle close of the popup/modal if the overlay is clicked\r\n    if (this.classList.contains('backdrop')) {\r\n      // Start closing the modal\r\n      closeModalByButton(this.previousElementSibling);\r\n\r\n      // close the backdrop\r\n      closeModalByBackdrop(this);\r\n    }\r\n  });\r\n};\r\n\r\n/**\r\n *  Configures modal internal content and exposes them for specific modal implementation\r\n * @param {string} rootId Host ID, where to position the templates\r\n * @param {string} templateId the template Id in the html waiting for position\r\n * @param {'beforebegin' | 'beforeend' | 'afterbegin' | 'afterend'} displayPosition HTML insert position in the root element\r\n * @returns {HTMLElement} HTML DOM elment inserted in the DOM\r\n */\r\nconst configureModal = (rootId, templateId, displayPosition) => {\r\n  // Render UI element to the DOM\r\n  let domEl = addTemplateUIElement(rootId, templateId, displayPosition);\r\n\r\n  //let textNode = addTemplateUIElement;\r\n\r\n  /// Add content to the modal\r\n  const modalHeaderEl = domEl.querySelector('.modal__header');\r\n  const modalCloseBtnEl = domEl.querySelector('.modal__btn-close');\r\n  const modalTitleEl = domEl.querySelector('.modal__title');\r\n  const modalStatusEl = domEl.querySelector('.modal__status-code');\r\n  const modalContentEl = domEl.querySelector('.modal__content');\r\n  const modalFooterEl = domEl.querySelector('.modal__footer');\r\n  const modalFooterTextEl = domEl.querySelector('.modal__footer .modal__text');\r\n\r\n  /// Expose modal internals HTML elements\r\n  return {\r\n    domEl,\r\n    modalCloseBtnEl,\r\n    modalHeaderEl,\r\n    modalTitleEl,\r\n    modalStatusEl,\r\n    modalContentEl,\r\n    modalFooterEl,\r\n    modalFooterTextEl,\r\n  };\r\n};\r\n\r\n/**\r\n *  Configures backdrop internal content and exposes them for specific modal implementation\r\n * @param {string} rootId Host ID, where to position the templates\r\n * @param {string} templateId the template Id in the html waiting for position\r\n * @param {'beforebegin' | 'beforeend' | 'afterbegin' | 'afterend'} displayPosition HTML insert position in the root element\r\n * @returns {HTMLElement} HTML DOM elment inserted in the DOM\r\n */\r\nconst configureBackdrop = (rootId, templateId, displayPosition) => {\r\n  // Render Backdrop to the UI\r\n  let domEl = addTemplateUIElement(rootId, templateId, displayPosition);\r\n\r\n  /// Hide backdrop\r\n  handleClosePopup(domEl);\r\n\r\n  // return backdrop\r\n  return domEl;\r\n};\r\n\r\n/// Export backdrop and popup\r\nexport { configureBackdrop, configureModal, handleClosePopup };\r\n","import {\r\n  configureModal,\r\n  configureBackdrop,\r\n  handleClosePopup,\r\n} from './handleModal.js';\r\n\r\n/**\r\n * Adds a styling context to the current selected dom element\r\n * @param {HTMLElement} domEl The html element that will get the current context style depending with the status code i.e. modal or overlay\r\n * @param {number} statusCode  status code of the error from the server\r\n * @param {string} type The element, i.e. modal or overlay\r\n */\r\nconst selectElementContext = (domEl, statusCode, type) => {\r\n  // Set default to none\r\n  let selectedStyle = '';\r\n\r\n  /// Warning messages\r\n  selectedStyle = `${statusCode}`.startsWith(4) && `${type}--warning`;\r\n\r\n  // info messages\r\n  if (!selectedStyle)\r\n    selectedStyle = `${statusCode}`.startsWith(3) && `${type}--info`;\r\n\r\n  // error messages\r\n  if (!selectedStyle)\r\n    selectedStyle = `${statusCode}`.startsWith(5) && `${type}--error`;\r\n\r\n  // Add element context\r\n  domEl.classList.add(selectedStyle);\r\n};\r\n\r\n/**\r\n * Ensures there is an error object with valid format. Expects a json object, which it parses to an object, page error\r\n * @param {JSON} errorObj A json object with the error string\r\n * @returns {{message: string, statusCode: number, stack: string} | undefined} parsed error object\r\n */\r\nconst parseErrorObject = errorObj => {\r\n  // Don not proceed if error object is not available\r\n  if (!errorObj) return;\r\n\r\n  // Get data\r\n  const pageError = JSON.parse(errorObj);\r\n\r\n  // Do not show modal if error object lackx\r\n  if (!pageError.message || !pageError.statusCode || !pageError.message) return;\r\n\r\n  // Get err object message content\r\n  return pageError;\r\n};\r\n\r\n/**\r\n * Handle showing overlay\r\n * @param {{statusCode: number, stack: string, message: string}} errorObj An error object from the server\r\n */\r\nconst showErrorBackdrop = errorObj => {\r\n  // Get parsed error object\r\n  const pageError = parseErrorObject(errorObj);\r\n\r\n  // Do not show backdrop\r\n  if (!pageError) return;\r\n\r\n  // Get err status code\r\n  const { statusCode } = pageError;\r\n\r\n  // Add backdrop configurations\r\n  let domEl = configureBackdrop('overlay', 'backdrop', 'beforeend');\r\n\r\n  /// Add backdrop context\r\n  selectElementContext(domEl, statusCode, 'backdrop');\r\n};\r\n\r\n/**\r\n * Handle showing modal\r\n * @param {{statusCode: number, stack: string, message: string}} errorObj An error object from the server\r\n */\r\nconst showErrorModal = errorObj => {\r\n  // Get parsed error object\r\n  const pageError = parseErrorObject(errorObj);\r\n\r\n  // Do not show modal\r\n  if (!pageError) return;\r\n\r\n  // Get err status code\r\n  const { statusCode, stack, message } = pageError;\r\n\r\n  // Configure modal internals elements\r\n  const {\r\n    domEl,\r\n    modalCloseBtnEl,\r\n    modalTitleEl,\r\n    modalStatusEl,\r\n    modalContentEl,\r\n    modalFooterTextEl,\r\n  } = configureModal('overlay', 'modal', 'afterbegin');\r\n\r\n  /// Wrap error line number with a unique color value\r\n  const wrapLineNumberWithColor = stack.split('\\n').map(str => {\r\n    return str.replace(\r\n      /\\d+:\\d+/g,\r\n      match => `<span class=\"modal__error-line-number\">${match}</span>`\r\n    );\r\n  });\r\n\r\n  /// Wrap errors in a paragrapm\r\n  const errorStackMsgs = wrapLineNumberWithColor\r\n    .map(msg => `<p class=\"modal__text\">${msg.trim()}</p>`)\r\n    .slice(1)\r\n    .join(' ');\r\n\r\n  /// Add error stack text\r\n  modalContentEl.innerHTML = errorStackMsgs;\r\n\r\n  /// Add header title message\r\n  modalTitleEl.innerHTML = wrapLineNumberWithColor.at(0);\r\n\r\n  /// Add status code\r\n  modalStatusEl.innerHTML = statusCode;\r\n\r\n  /// Show message to the footer\r\n  modalFooterTextEl.innerHTML = message;\r\n\r\n  //Add modal context\r\n  selectElementContext(domEl, statusCode, 'modal');\r\n\r\n  /// Handling modal close\r\n  handleClosePopup(modalCloseBtnEl);\r\n};\r\n\r\n/// Show UI templates\r\nexport { showErrorModal, showErrorBackdrop };\r\n"],"names":[],"mappings":"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"}